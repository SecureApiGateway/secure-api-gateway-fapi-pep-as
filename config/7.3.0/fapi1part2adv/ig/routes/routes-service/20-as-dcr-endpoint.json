{
  "name": "20 - DCR - Dynamic Client Registration",
  "comment": "Ensure FAPI compliant registration requests",
  "baseURI": "https://&{identity.platform.fqdn}",
  "condition": "${find(request.uri.path, '^/am/oauth2/realms/root/realms/&{am.realm}/fapi/register')}",
  "handler": {
    "type": "Chain",
    "config": {
      "filters": [
        {
          "comment": "FAPI DCR Filter Chain",
          "name": "fapiDcrFilterChain",
          "type": "FapiDcrFilterChain",
          "config": {
            "auditService" : "fapiAuditService",
            "forwardedHost" : "&{identity.platform.fqdn}",
            "clientCertificate": "${pemCertificate(urlDecode(request.headers['ssl-client-cert'][0]))}",
            "trustedDirectoryService": "TrustedDirectoryService",
            "jwkSetService": "JwkSetService",
            "supportedSigningAlgorithms": ["PS256"],
            "supportedTokenEndpointAuthMethods": "${oauth2.tokenEndpointAuthMethodsSupported}",
            "apiClientService": "IdmApiClientService",
            "apiClientOrgService": "IdmApiClientOrganisationService",
            "clientId": "${request.queryParams.client_id[0]}"
          }
        },
        {
          "comment": "FAPI/ OB Scope validation versus SSA",
          "name": "scopeValidationFilter",
          "type": "RegistrationRequestRoleBasedScopeValidationFilter"
        },
        {
          "name": "AddIgAccessTokenForNewRegistrations",
          "comment": "When creating a new registration we need to obtain credentials to allow IG to talk to AM. For flows which operate on an existing registration, the TPP must supply the registration_access_token returned in the DCR response",
          "type": "ConditionalFilter",
          "config": {
            "condition": "${request.method == 'POST'}",
            "delegate": {
              "comment": "Fetch access token for dynamic client registration - IG credentials to talk to AM",
              "type": "ClientCredentialsOAuth2ClientFilter",
              "config": {
                "tokenEndpoint": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
                "scopes": [
                  "dynamic_client_registration"
                ],
                "endpointHandler": {
                  "name": "ClientCredentialsOAuth2ClientFilterHandler",
                  "type": "Chain",
                  "config": {
                    "handler": "ForgeRockClientHandler",
                    "filters": [
                      {
                        "type": "ClientSecretBasicAuthenticationFilter",
                        "config": {
                          "clientId": "&{ig.client.id}",
                          "clientSecretId": "ig.client.secret",
                          "secretsProvider": "SystemAndEnvSecretStore-IAM"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      ],
      "handler": "FRReverseProxyHandler"
    }
  }
}