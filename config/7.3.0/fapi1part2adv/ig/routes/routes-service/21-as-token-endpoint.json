{
  "name": "21 - Authorization Server OAuth2 token endpoint",
  "comment": "Ensure FAPI compliant access_token endpoint requests",
  "baseURI": "https://&{identity.platform.fqdn}",
  "condition": "${find(request.uri.path, '^/am/oauth2/realms/root/realms/&{am.realm}/access_token')}",
  "handler": {
    "type": "Chain",
    "config": {
      "filters": [
        {
          "comment": "FAPI Token Filter Chain",
          "name": "fapiTokenFilterChain",
          "type": "FapiTokenFilterChain",
          "config": {
            "auditService" : "fapiAuditService",
            "forwardedHost" : "&{as.fqdn}",
            "clientCertificate": "${pemCertificate(urlDecode(request.headers['ssl-client-cert'][0]))}",
            "apiClientService": "IdmApiClientService",
            "accessTokenResolver": {
              "name": "token-resolver",
              "type": "StatelessAccessTokenResolver",
              "config": {
                "secretsProvider": "SecretsProvider-AmJWK",
                "issuer": "https://&{as.fqdn}/am/oauth2/realms/root/realms/&{am.realm}",
                "verificationSecretId": "any.value.in.regex.format"
              }
            }
          }
        },
        {
          "comment": "Add gateway access token to request (custom AT modification script checks access token to enforce route via IG)",
          "type": "ClientCredentialsOAuth2ClientFilter",
          "config": {
            "tokenEndpoint": "https://&{identity.platform.fqdn}/am/oauth2/realms/root/realms/&{am.realm}/access_token",
            "scopes": [
              "trusted_gateway"
            ],
            "endpointHandler": {
              "name": "ClientCredentialsOAuth2ClientFilterHandler",
              "type": "Chain",
              "config": {
                "handler": "ForgeRockClientHandler",
                "filters": [
                  {
                    "type": "ClientSecretBasicAuthenticationFilter",
                    "config": {
                      "clientId": "&{ig.client.id}",
                      "clientSecretId": "ig.client.secret",
                      "secretsProvider": "SystemAndEnvSecretStore-IAM"
                    }
                  }
                ]
              }
            }
          }
        },
        {
          "name": "AuthorizeResponseJwtReSignFilter",
          "type": "AuthorizeResponseJwtReSignFilter",
          "comment": "Re-sign the authorize response data (id_token and/or JARM response) returned by AM to fix OB keyId issue",
          "config": {
            "jwtReSigner": "ObJwtReSigner"
          }
        }
      ],
      "handler": "FRReverseProxyHandler"
    }
  }
}